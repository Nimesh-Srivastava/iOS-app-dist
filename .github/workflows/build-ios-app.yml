name: Build iOS App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: macos-latest  # Use macOS runner for Xcode access
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Build iOS App
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        MONGO_URI: ${{ secrets.MONGO_URI }}
        DB_NAME: ${{ secrets.DB_NAME }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        # Create a request to the build API or use relevant parts of the app.py build function
        python -c "
import sys
import os
import uuid
import logging
from datetime import datetime
sys.path.append('.')
import database as db
from app import build_ios_app_from_github

# Configure logging
logging.basicConfig(level=logging.INFO)

# Get repository details from GitHub context
repo_url = os.environ.get('GITHUB_REPOSITORY', 'owner/repo')
repo_url = f'https://github.com/{repo_url}'
branch = os.environ.get('GITHUB_REF_NAME', 'main')

# App name from repository name
app_name = repo_url.split('/')[-1]

# Generate build ID
build_id = str(uuid.uuid4())

# Initialize the database to ensure it's ready
try:
    db.initialize_db()
    logging.info('Database initialized successfully')
except Exception as e:
    logging.error(f'Database initialization failed: {e}')
    sys.exit(1)

# Create build record
build_record = {
    'id': build_id,
    'repo_url': repo_url,
    'branch': branch,
    'app_name': app_name,
    'build_config': 'Release',
    'team_id': os.environ.get('APPLE_TEAM_ID', ''),
    'xcode_version': 'latest',
    'status': 'queued',
    'start_time': datetime.now().isoformat(),
    'log': [f'GitHub Actions automated build for {repo_url} (branch: {branch})\n']
}

# Save build record
try:
    db.save_build(build_record)
    logging.info(f'Build record created with ID: {build_id}')
except Exception as e:
    logging.error(f'Failed to create build record: {e}')
    sys.exit(1)

# Start the build process
logging.info('Starting iOS app build process...')
build_ios_app_from_github(
    build_id, 
    repo_url, 
    branch, 
    app_name,
    build_config='Release'
)

# Get final build status
build = db.get_build(build_id)
if build and build.get('status') == 'completed':
    logging.info('Build completed successfully!')
    sys.exit(0)
else:
    logging.error('Build failed or did not complete')
    if build and build.get('log'):
        logging.error(f'Build log: {build.get('log')}')
    sys.exit(1)
"
        
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ios-app-build
        path: builds/
        retention-days: 5 